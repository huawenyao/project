"""
UI Agent - UI/UX 设计和组件生成代理

负责：
- UI/UX 设计分析
- 组件库选择
- 布局设计
- 样式代码生成
- 响应式设计建议
"""

from typing import TypedDict, Annotated, Literal
from langgraph.graph import StateGraph, END
from langgraph.prebuilt import ToolNode
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
import operator
import json


class UIAgentState(TypedDict):
    """UI Agent 状态定义"""
    messages: Annotated[list[BaseMessage], operator.add]
    ui_requirements: dict
    component_library: str
    layout_design: dict
    generated_components: list[dict]
    style_guide: dict


@tool
def analyze_ui_requirements(description: str) -> dict:
    """
    分析 UI 需求并提取关键信息

    Args:
        description: 用户的 UI 需求描述

    Returns:
        UI 需求分析结果
    """
    # 分析 UI 类型、风格、复杂度
    return {
        "app_type": "web_application",
        "ui_style": "modern_minimalist",
        "complexity": "medium",
        "key_pages": [
            "homepage",
            "dashboard",
            "settings"
        ],
        "required_components": [
            "navigation_bar",
            "sidebar",
            "data_table",
            "forms",
            "modal_dialogs"
        ],
        "color_scheme": "light_theme",
        "responsive": True
    }


@tool
def select_component_library(requirements: dict) -> dict:
    """
    根据需求选择合适的组件库

    Args:
        requirements: UI 需求

    Returns:
        推荐的组件库及原因
    """
    # 基于需求分析选择最合适的组件库
    return {
        "recommended": "Material-UI (MUI)",
        "alternatives": [
            "Ant Design",
            "Chakra UI",
            "Tailwind CSS + HeadlessUI"
        ],
        "reasons": [
            "丰富的预构建组件",
            "优秀的 TypeScript 支持",
            "活跃的社区和文档",
            "内置响应式设计"
        ],
        "installation": "npm install @mui/material @emotion/react @emotion/styled"
    }


@tool
def generate_layout_design(page_name: str, requirements: dict) -> dict:
    """
    生成页面布局设计

    Args:
        page_name: 页面名称
        requirements: 页面需求

    Returns:
        布局设计方案
    """
    return {
        "page": page_name,
        "layout_type": "dashboard",
        "structure": {
            "header": {
                "height": "64px",
                "components": ["logo", "navigation", "user_menu"]
            },
            "sidebar": {
                "width": "240px",
                "collapsible": True,
                "components": ["menu_items", "footer"]
            },
            "main_content": {
                "padding": "24px",
                "components": ["breadcrumb", "content_area"]
            }
        },
        "grid_system": "12_column",
        "breakpoints": {
            "mobile": "< 768px",
            "tablet": "768px - 1024px",
            "desktop": "> 1024px"
        }
    }


@tool
def generate_component_code(component_spec: dict) -> str:
    """
    生成 React 组件代码

    Args:
        component_spec: 组件规格说明

    Returns:
        生成的组件代码
    """
    component_name = component_spec.get("name", "MyComponent")
    component_type = component_spec.get("type", "functional")

    code = f"""
import React from 'react';
import {{ Box, Typography }} from '@mui/material';

interface {component_name}Props {{
  title?: string;
  data?: any[];
}}

/**
 * {component_name} - Auto-generated UI Component
 *
 * This component was generated by the UI Agent based on your requirements.
 * Feel free to customize and extend it as needed.
 */
export const {component_name}: React.FC<{component_name}Props> = ({{
  title = 'Default Title',
  data = []
}}) => {{
  return (
    <Box sx={{{{ padding: 2, borderRadius: 1, boxShadow: 1 }}}}>
      <Typography variant="h5" gutterBottom>
        {{title}}
      </Typography>
      <Box>
        {{/* Add your component logic here */}}
        {{data.length > 0 ? (
          data.map((item, index) => (
            <Typography key={{index}}>{{item}}</Typography>
          ))
        ) : (
          <Typography color="text.secondary">No data available</Typography>
        )}}
      </Box>
    </Box>
  );
}};

export default {component_name};
"""
    return code.strip()


@tool
def create_style_guide(brand_colors: dict, typography: dict) -> dict:
    """
    创建样式指南

    Args:
        brand_colors: 品牌颜色
        typography: 排版规范

    Returns:
        完整的样式指南
    """
    return {
        "colors": {
            "primary": brand_colors.get("primary", "#1976d2"),
            "secondary": brand_colors.get("secondary", "#dc004e"),
            "background": "#ffffff",
            "text": {
                "primary": "#000000",
                "secondary": "#666666"
            }
        },
        "typography": {
            "font_family": "'Roboto', 'Helvetica', 'Arial', sans-serif",
            "sizes": {
                "h1": "2.5rem",
                "h2": "2rem",
                "h3": "1.75rem",
                "body": "1rem",
                "small": "0.875rem"
            }
        },
        "spacing": {
            "unit": "8px",
            "scale": [0, 8, 16, 24, 32, 40, 48, 64]
        },
        "shadows": {
            "small": "0 2px 4px rgba(0,0,0,0.1)",
            "medium": "0 4px 8px rgba(0,0,0,0.15)",
            "large": "0 8px 16px rgba(0,0,0,0.2)"
        }
    }


# 定义可用工具
tools = [
    analyze_ui_requirements,
    select_component_library,
    generate_layout_design,
    generate_component_code,
    create_style_guide
]


def should_continue(state: UIAgentState) -> Literal["tools", "__end__"]:
    """决定是否继续执行"""
    messages = state["messages"]
    last_message = messages[-1]

    if hasattr(last_message, "tool_calls") and last_message.tool_calls:
        return "tools"

    return END


def call_model(state: UIAgentState):
    """调用 LLM 模型"""
    messages = state["messages"]

    # 系统提示词
    system_prompt = """你是一个专业的 UI/UX 设计专家和前端开发者。

你的职责：
1. 分析用户的 UI 需求
2. 推荐合适的组件库和设计方案
3. 生成布局设计
4. 创建可用的 React 组件代码
5. 提供样式指南和最佳实践

你应该：
- 使用现代化的 UI 设计原则
- 考虑响应式设计和可访问性
- 提供清晰的组件代码和注释
- 给出具体的实施建议

在回答时，请调用相关工具来完成任务。"""

    # 创建带系统提示的消息列表
    messages_with_system = [
        HumanMessage(content=system_prompt)
    ] + messages

    # 创建 LLM 实例
    model = ChatOpenAI(
        model="gpt-4o-mini",
        temperature=0.7
    )

    # 绑定工具
    model_with_tools = model.bind_tools(tools)

    # 调用模型
    response = model_with_tools.invoke(messages_with_system)

    return {"messages": [response]}


def create_ui_agent_graph():
    """创建 UI Agent 图"""
    workflow = StateGraph(UIAgentState)

    # 添加节点
    workflow.add_node("agent", call_model)
    workflow.add_node("tools", ToolNode(tools))

    # 设置入口点
    workflow.set_entry_point("agent")

    # 添加条件边
    workflow.add_conditional_edges(
        "agent",
        should_continue,
        {
            "tools": "tools",
            END: END
        }
    )

    # 工具执行后返回 agent
    workflow.add_edge("tools", "agent")

    return workflow.compile()


def run_ui_agent(user_request: str) -> dict:
    """
    运行 UI Agent

    Args:
        user_request: 用户请求

    Returns:
        Agent 响应
    """
    graph = create_ui_agent_graph()

    initial_state = {
        "messages": [HumanMessage(content=user_request)],
        "ui_requirements": {},
        "component_library": "",
        "layout_design": {},
        "generated_components": [],
        "style_guide": {}
    }

    result = graph.invoke(initial_state)

    return {
        "final_message": result["messages"][-1].content,
        "all_messages": [msg.content for msg in result["messages"]],
        "state": result
    }


if __name__ == "__main__":
    # 测试代码
    result = run_ui_agent("我需要为一个数据分析平台设计 UI，包括仪表板、数据表格和图表展示")
    print("UI Agent Response:", result["final_message"])
